/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.logging.persist.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.logging.persist.model.LoggingConfig;
import com.liferay.logging.persist.model.LoggingConfigModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LoggingConfig service. Represents a row in the &quot;LOGCFG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LoggingConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoggingConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LoggingConfigImpl
 * @see LoggingConfig
 * @see LoggingConfigModel
 * @generated
 */
@ProviderType
public class LoggingConfigModelImpl extends BaseModelImpl<LoggingConfig>
	implements LoggingConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a logging config model instance should use the {@link LoggingConfig} interface instead.
	 */
	public static final String TABLE_NAME = "LOGCFG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "logConfigId", Types.BIGINT },
			{ "logger", Types.VARCHAR },
			{ "level", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("logConfigId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("logger", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LOGCFG (logConfigId LONG not null primary key,logger VARCHAR(400) null,level VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LOGCFG";
	public static final String ORDER_BY_JPQL = " ORDER BY loggingConfig.logConfigId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LOGCFG.logConfigId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.logging.persist.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.logging.persist.model.LoggingConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.logging.persist.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.logging.persist.model.LoggingConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.logging.persist.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.logging.persist.model.LoggingConfig"),
			true);
	public static final long LOGGER_COLUMN_BITMASK = 1L;
	public static final long LOGCONFIGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.logging.persist.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.logging.persist.model.LoggingConfig"));

	public LoggingConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _logConfigId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLogConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _logConfigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LoggingConfig.class;
	}

	@Override
	public String getModelClassName() {
		return LoggingConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("logConfigId", getLogConfigId());
		attributes.put("logger", getLogger());
		attributes.put("level", getLevel());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long logConfigId = (Long)attributes.get("logConfigId");

		if (logConfigId != null) {
			setLogConfigId(logConfigId);
		}

		String logger = (String)attributes.get("logger");

		if (logger != null) {
			setLogger(logger);
		}

		String level = (String)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}
	}

	@Override
	public long getLogConfigId() {
		return _logConfigId;
	}

	@Override
	public void setLogConfigId(long logConfigId) {
		_columnBitmask = -1L;

		_logConfigId = logConfigId;
	}

	@Override
	public String getLogger() {
		if (_logger == null) {
			return StringPool.BLANK;
		}
		else {
			return _logger;
		}
	}

	@Override
	public void setLogger(String logger) {
		_columnBitmask |= LOGGER_COLUMN_BITMASK;

		if (_originalLogger == null) {
			_originalLogger = _logger;
		}

		_logger = logger;
	}

	public String getOriginalLogger() {
		return GetterUtil.getString(_originalLogger);
	}

	@Override
	public String getLevel() {
		if (_level == null) {
			return StringPool.BLANK;
		}
		else {
			return _level;
		}
	}

	@Override
	public void setLevel(String level) {
		_level = level;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LoggingConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LoggingConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LoggingConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoggingConfigImpl loggingConfigImpl = new LoggingConfigImpl();

		loggingConfigImpl.setLogConfigId(getLogConfigId());
		loggingConfigImpl.setLogger(getLogger());
		loggingConfigImpl.setLevel(getLevel());

		loggingConfigImpl.resetOriginalValues();

		return loggingConfigImpl;
	}

	@Override
	public int compareTo(LoggingConfig loggingConfig) {
		int value = 0;

		if (getLogConfigId() < loggingConfig.getLogConfigId()) {
			value = -1;
		}
		else if (getLogConfigId() > loggingConfig.getLogConfigId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LoggingConfig)) {
			return false;
		}

		LoggingConfig loggingConfig = (LoggingConfig)obj;

		long primaryKey = loggingConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LoggingConfigModelImpl loggingConfigModelImpl = this;

		loggingConfigModelImpl._originalLogger = loggingConfigModelImpl._logger;

		loggingConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LoggingConfig> toCacheModel() {
		LoggingConfigCacheModel loggingConfigCacheModel = new LoggingConfigCacheModel();

		loggingConfigCacheModel.logConfigId = getLogConfigId();

		loggingConfigCacheModel.logger = getLogger();

		String logger = loggingConfigCacheModel.logger;

		if ((logger != null) && (logger.length() == 0)) {
			loggingConfigCacheModel.logger = null;
		}

		loggingConfigCacheModel.level = getLevel();

		String level = loggingConfigCacheModel.level;

		if ((level != null) && (level.length() == 0)) {
			loggingConfigCacheModel.level = null;
		}

		return loggingConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{logConfigId=");
		sb.append(getLogConfigId());
		sb.append(", logger=");
		sb.append(getLogger());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.logging.persist.model.LoggingConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>logConfigId</column-name><column-value><![CDATA[");
		sb.append(getLogConfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logger</column-name><column-value><![CDATA[");
		sb.append(getLogger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LoggingConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LoggingConfig.class
		};
	private long _logConfigId;
	private String _logger;
	private String _originalLogger;
	private String _level;
	private long _columnBitmask;
	private LoggingConfig _escapedModel;
}